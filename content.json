{"meta":{"title":"Feway","subtitle":null,"description":null,"author":"Gavin-Gong","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2016-10-04T07:12:10.621Z","updated":"2016-10-04T07:12:10.621Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-10-04T07:12:10.635Z","updated":"2016-10-04T07:12:10.635Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2016-10-04T07:12:10.628Z","updated":"2016-10-04T07:12:10.628Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"promise","slug":"promise","date":"2016-10-13T12:38:36.006Z","updated":"2016-10-14T01:14:41.942Z","comments":true,"path":"2016/10/13/promise/","link":"","permalink":"http://yoursite.com/2016/10/13/promise/","excerpt":"","text":"1234567891011121314151617let promise = new Promise((rsv, rjct) =&gt; &#123; if (/*condition*/) &#123; rsv() //如果rsv()函数带参数, 会传递给下一个then &#125; else &#123; rjct() ////如果rjct()函数带参数, 会传递给下一个then, 或者catch函数 &#125;&#125;)promise.then(data =&gt; console.log(data), err =&gt; console.log(err))// 或者promise.then(data =&gt; console.log(data)).catch(err =&gt; console.log(err))// data 为rsv()函数带的参数, 为空则data为undefined// err 为reject()函数带的参数,// 链式调用promise.then(data =&gt; data).then(data =&gt; data)// promise值得传递, resolve()函数通过自己的参数传递给第一个then的第一个函数参数, (第二个函数参数接受的是reject()传递的参数), 如果then往后面的then传递数据, 将要传的数据return下去, 上面是箭头函数的写法, 可以省略rturn APIpromise.prototype.then()promise.prototype.resolve()promise.prototype.reject()promise.prototype.all()promise.prototype.race()参考es6入门","categories":[{"name":"FE","slug":"FE","permalink":"http://yoursite.com/categories/FE/"}],"tags":[{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"keywords":[{"name":"FE","slug":"FE","permalink":"http://yoursite.com/categories/FE/"}]},{"title":"fetch","slug":"fetch-api","date":"2016-10-11T04:21:49.795Z","updated":"2016-10-14T01:14:39.793Z","comments":true,"path":"2016/10/11/fetch-api/","link":"","permalink":"http://yoursite.com/2016/10/11/fetch-api/","excerpt":"","text":"fetch api1234567891011fetch('url', &#123; method: 'POST', headers: &#123; 'Content-Type': 'text/plain', &#125;, // ......&#125;).then(res =&gt; &#123; &#125;).catch( err =&gt; &#123; &#125;);","categories":[{"name":"FE","slug":"FE","permalink":"http://yoursite.com/categories/FE/"}],"tags":[{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"keywords":[{"name":"FE","slug":"FE","permalink":"http://yoursite.com/categories/FE/"}]},{"title":"async/await","slug":"async-wait","date":"2016-10-10T12:06:50.548Z","updated":"2016-10-14T01:11:55.539Z","comments":true,"path":"2016/10/10/async-wait/","link":"","permalink":"http://yoursite.com/2016/10/10/async-wait/","excerpt":"","text":"async/await await只能用于async函数中 await后面一般接一个promise对象，如不是promise对象, 则失去异步调用的作用 async总是返回一个promise对象, 所以你可以在后面接then() 并发1234567async function foo () &#123; let [a, b, c] = await Promise.all([p1, p2, p3]); // a, b, c 是对象promise对象执行后的resolve值 // 或者这样 // const all = Promise.all.bind(Promise); // let [a, b, c] = await all([p1, p2, p3]);&#125; 错误处理123asyncFunction() .then() .catch(err =&gt; console.log(err)) 循环多个await如果要循环多个await 要注意async 的上下文,await要始终保持在它的上下文中, 123456789[1, 2, 3].forEach( v =&gt; &#123; await sleep(1000); // 这里的await并没有在`async`函数上下文中&#125;)// 正确写法, 用for循环for (let i of [1, 2, 3]) &#123; await sleep(1000);&#125; awaitawait后面接一个promise对象, 如果不是则不执行异步, 想到Promise.resolve()可以将转化为promise对象, 试了试如下代码 123456789101112function timeout(ms) &#123; setTimeout(() =&gt; console.log('timeout'), ms)&#125;async function asyncPrint(value, ms) &#123; await Promise.resolve(timeout(ms)); console.log(value)&#125;asyncPrint('hello world', 50); // 'hello world'// 'timeout' 并没有什么卵用.","categories":[{"name":"FE","slug":"FE","permalink":"http://yoursite.com/categories/FE/"}],"tags":[{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}],"keywords":[{"name":"FE","slug":"FE","permalink":"http://yoursite.com/categories/FE/"}]}]}