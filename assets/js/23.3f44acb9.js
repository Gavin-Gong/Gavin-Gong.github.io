(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{151:function(t,a,s){"use strict";s.r(a);var n=s(0),v=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h3",{attrs:{id:"基础类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础类型")]),s("h4",{attrs:{id:"命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名","aria-hidden":"true"}},[t._v("#")]),t._v(" 命名")]),s("p",[t._v("在go语言中一切函数, 变量, 常量的命名, 都要以字母或者下滑线开头, 后面跟字母, 下划线, 数字 并且区分大小写")]),s("p",[t._v("另外 在命名的时候要避开以下关键字")]),s("ul",[s("li",[t._v("break")]),s("li",[t._v("default")]),s("li",[t._v("func")]),s("li",[t._v("interface")]),s("li",[t._v("select")]),s("li",[t._v("case")]),s("li",[t._v("defer")]),s("li",[t._v("go")]),s("li",[t._v("map")]),s("li",[t._v("struct")]),s("li",[t._v("chan")]),s("li",[t._v("else")]),s("li",[t._v("goto")]),s("li",[t._v("package")]),s("li",[t._v("switch")]),s("li",[t._v("const")]),s("li",[t._v("fallthrought")]),s("li",[t._v("if")]),s("li",[t._v("range")]),s("li",[t._v("type")]),s("li",[t._v("coutinue")]),s("li",[t._v("for")]),s("li",[t._v("import")]),s("li",[t._v("return")]),s("li",[t._v("var")])]),s("p",[t._v("以及一些预定关键字")]),s("ul",[s("li",[t._v("内置常量 "),s("code",[t._v("true")]),t._v(", "),s("code",[t._v("false")]),t._v(", "),s("code",[t._v("iota")]),t._v(", "),s("code",[t._v("nil")])]),s("li",[t._v("内置int类型 "),s("code",[t._v("int")]),t._v(","),s("code",[t._v("int8")]),t._v(", "),s("code",[t._v("int16")]),t._v(","),s("code",[t._v("int32")]),t._v(","),s("code",[t._v("int64")])]),s("li",[t._v("内置unit类型"),s("code",[t._v("unit")]),t._v(","),s("code",[t._v("unit8")]),t._v(","),s("code",[t._v("unit16")]),t._v(","),s("code",[t._v("unit32")]),t._v(", "),s("code",[t._v("unit64")]),t._v(", "),s("code",[t._v("unitptr")])]),s("li",[t._v("内置浮点 "),s("code",[t._v("float32")]),t._v(", "),s("code",[t._v("float64")])]),s("li",[t._v("内置复数 "),s("code",[t._v("complex64")]),t._v(", "),s("code",[t._v("complex128")])]),s("li",[t._v("其他常用类型"),s("code",[t._v("bool")]),t._v(","),s("code",[t._v("byte")]),t._v(","),s("code",[t._v("rune")]),t._v(","),s("code",[t._v("string")]),t._v(","),s("code",[t._v("error")])]),s("li",[t._v("内置函数"),s("code",[t._v("make")]),t._v(","),s("code",[t._v("len")]),t._v(","),s("code",[t._v("cap")]),t._v(","),s("code",[t._v("new")]),t._v(","),s("code",[t._v("append")]),t._v(","),s("code",[t._v("copy")]),t._v(","),s("code",[t._v("close")]),t._v(","),s("code",[t._v("delete")]),t._v(","),s("code",[t._v("recover")]),t._v(","),s("code",[t._v("complex")]),t._v(","),s("code",[t._v("real")]),t._v(","),s("code",[t._v("imag")])])]),s("h4",{attrs:{id:"变量声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量声明")]),s("p",[t._v("golang 中可以通过"),s("code",[t._v("var")]),t._v("和"),s("code",[t._v("const")]),t._v("对变量进行声明, 例如")]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n")])])]),s("p",[t._v("我们也可以一次声明多个变量, 也可以声明函数参数时候使用")]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("或者使用小括号(可以考虑把相关代码放组织到一个小括号, 方便阅读)")]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\ta "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\tb "),s("span",{attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"变量初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量初始化","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量初始化")]),s("p",[t._v("有时候我们需要对变量进行初始化操作, 尽管在声明完变量之后 变量是存在一个默认零值, 不同类型不一致,")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var a int = 1\n\nvar b = 1 // 编译器可以自动推导b的类型\n")])])]),s("p",[t._v("我们也可以用"),s("code",[t._v(":=")]),t._v(" 来进行变量初始化, 但是值得注意的一点它只能在"),s("strong",[t._v("函数")]),t._v("中使用,  且改变量不能在之前被"),s("code",[t._v("var")]),t._v("或者"),s("code",[t._v("const")]),t._v("声明过.")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a := 1 // 编译器会进行自动类型推导\n")])])]),s("h4",{attrs:{id:"变量赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量赋值","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量赋值")]),s("p",[t._v("在声明完变量之后我们可以对变量进行赋值或者在这基础上进行重新赋值, 因为golang是静态强类型, 对于指定相应类型的变量需要赋予相应的类型值")]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),s("span",{attrs:{class:"token builtin"}},[t._v("string")]),t._v("\nfoo "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"xxx"')]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 不是字符串类型会报错")]),t._v("\n")])])]),s("p",[t._v("我们也可以多重赋值")]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\ta "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\tb "),s("span",{attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"string"')]),t._v("\n")])])]),s("p",[t._v("甚至我们可以交换变量赋值")]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("a "),s("span",{attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\nb "),s("span",{attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\na"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c\n")])])]),s("h4",{attrs:{id:"匿名变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 匿名变量")]),s("p",[t._v("golang 存在一个特殊变量"),s("code",[t._v("_")]),t._v("  可以说是变量中的弃婴, 因为它生来就是被丢弃的,")]),s("p",[t._v("golang中存在一个函数有两个返回值的情况, 但是当我们只需要其中一个变量时, 我们需要用"),s("code",[t._v("_")]),t._v("来 表示不需要的变量")]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("foo")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("string")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("24")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"years"')]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nage"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("foo")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("另外我们可能需要引用一个匿名包(只会运行包中的init函数), 我们需要这样写,")]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"path/to/pkg"')]),t._v("\n\n")])])]),s("h4",{attrs:{id:"类型零值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型零值","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型零值")]),s("p",[t._v("golang中在变量被申明之后, 会有一个"),s("strong",[t._v("默认零值")]),t._v(" , 整型一般对应"),s("code",[t._v("0")]),t._v(", 浮点数对应"),s("code",[t._v("0.0")]),t._v(", bool对应"),s("code",[t._v("false")]),t._v(", "),s("code",[t._v("byte")]),t._v("其实就是"),s("code",[t._v("int8")]),t._v("对应"),s("code",[t._v("0")]),t._v(" , "),s("code",[t._v("rune")]),t._v("(其实就是int32)对应"),s("code",[t._v("0")]),t._v(", string对应"),s("code",[t._v('""')])]),s("h4",{attrs:{id:"类型转化-todo-类型兼容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转化-todo-类型兼容","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型转化 TODO 类型兼容")]),s("p",[t._v("golang不允许隐式类型转化, 要进行类型转化需要进行显示声明, 而且两种类型之间必须要兼容,")]),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ch "),s("span",{attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("97")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}],!1,null,null,null);a.default=v.exports}}]);